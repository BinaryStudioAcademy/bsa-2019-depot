#!/usr/bin/env node

const childProcessExec = require('child_process').exec;
const util = require('util');

const exec = util.promisify(childProcessExec);

const emailRegex = /^(([^<>()\\.,;:\s@"]+(\.[^<>()\\.,;:\s@"]+)*)|(".+"))@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

console.log('--------');
console.log('To be able to see changes in your data from the website');
console.log('you need to configure your Git client with email, that you');
console.log('are using at your account on the website.');
console.log('Ignore this message if you\'ve already took requested actions.');
console.log('--------');

process.stdin.setEncoding('utf8');

let data;

process.stdin.on('readable', () => {
  let chunk;

  while ((chunk = process.stdin.read())) {
    data = chunk;
  }
});

process.stdin.on('end', async () => {
  const [prevHeadSha, newHeadSha] = data.trim().split(' ').slice(0, -1);
  await checkCommitEmails(prevHeadSha, newHeadSha);

  process.exit(0);
});

async function checkCommitEmails(shaFrom, shaTo) {
  const revList = (shaFrom === '0000000000000000000000000000000000000000')
    ? await exec(`git rev-list ${shaTo} --not --branches=*`)
    : await exec(`git rev-list ${shaFrom}..${shaTo}`);
  const commitShas = revList.stdout.split('\n').filter(line => line);
  await Promise.all(commitShas.map(sha => getAuthorEmail(sha)));
}

async function getAuthorEmail(sha) {
  const command = `git log --format='%ae' ${sha} -1`;
  const { stdout } = await exec(command);

  let email = stdout.trim();
  if (email.startsWith('\'')) {
    email = email.slice(1, -1);
  }
  
  if (!email.trim() || !emailRegex.test(email.trim())) {
    console.log('Absent or invalid email!');
    console.log('You need to configure your email in Git client');
    console.log('and rewrite commits to update them with email');
    console.log('to be able to use remote repository');
    process.exit(1);
  }
}